<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.plz.config.mybatis.mapper.reservationMapper">
	<!-- 
		사용자가 예약을 수정,삭제,조회,추가   
		code테이블에 예약상태 (예약대기/예약확정/예약종료)가 들어간다.
	-->
	<sql id="reservation-sql">
		select  res_id,
			    res_type,
			    res_sdate,
			    res_edate,
			    res_contents,
			    email,
			    email_sitter
		from    reservation
	</sql>
	
	<sql id="reservation-join-demand-sql">
		select  r.res_id,
			    r.res_type,
			    r.res_sdate,
			    r.res_edate,
			    r.res_contents,
			    r.email,
			    r.email_sitter,
			    c.code,
			    c.code_name,
			    c.category
		from    reservation r, demand d, code c
		where   r.res_id = d.res_id
		and 	d.code_demand = c.code
	</sql>
	
	<sql id="reservation-join-sales-sql">
		select  r.res_id,
			    r.res_type,
			    r.res_sdate,
			    r.res_edate,
			    r.res_contents,
			    r.email,
			    r.email_sitter,
			    s.total,
			    s.pay,
			    s.commission,
			    s.sales_date
		from    reservation r, sales s
		where   r.res_id = s.res_id
	</sql>
	
	<!-- 
		이미지가 없는 돌봄일지도 있으므로
		외부 조인을 한다.
	 -->
	<sql id="reservation-join-care-sql">
		select  r.res_id,
			    r.res_type,
			    r.res_sdate,
			    r.res_edate,
			    r.res_contents,
			    r.email,
			    r.email_sitter,
			    c.care_id,
			    c.care_contents,
			    c.care_date,
			    i.care_image
		from    reservation r, care c, care_image i
		where   r.res_id = c.res_id
		and		c.care_id = i.care_id(+)
	</sql>
	
	<!-- reservation resultmap -->
	<resultMap id="reservation-resultmap" type="Reservation">
		<id column="res_id" property="resId"/>
		<result column="res_type" property="resType"/>
		<result column="res_sdate" property="resSDate"/>
		<result column="res_edate" property="resEdate"/>
		<result column="res_contents" property="resContents"/>
		<result column="email" property="memberEmail"/>
		<result column="email_sitter" property="sitterEmail"/>
	</resultMap>
	
	<!-- 
		회원의 예약 상태 + 시터 스킬 + 시터 환경를 조회하는 resultmap 
		<result column="res_id" property="resId"/>
		join되는 demand의 id를 또 지정하게 되면 demand를 여러개 가져올 수 없다. 
	-->
	<resultMap id="reservation-join-demand-resultmap" type="Reservation" extends="reservation-resultmap">
		<collection property ="demandList" ofType ="Demand">
			
			<association property="code" javaType="Code">
				<id column="code" property="code"/>
				<result column="code_name" property="codeName"/>
				<result column="category" property="category"/>
			</association>
		</collection>
	</resultMap>
	
	<!-- 해당 시터의 급여를 조회하는 resultmap -->
	<resultMap id="reservation-join-sales-resultmap" type = "Reservation" extends="reservation-resultmap">
		<association property ="sales" javaType ="sales">
			<result column ="res_id" property ="resId"/>
			<result column="total" property="total"/>
			<result column="pay" property="pay"/>
			<result column="commission" property="commission"/>
			<result column="sales_Date" property="salesDate"/>
		</association>
	</resultMap>
	
	<!-- 해당 예약의 돌봄일지를 조회 -->
	<resultMap id="reservation-join-care-resultmap" type="Reservation" extends="reservation-resultmap">
		<collection property ="careList" ofType="Care">
			<id column = "care_id" property ="careId"/>
			<result column="care_contents" property="careContents"/>
			<result column="res_id" property="resId"/>  
			<result column="care_date" property="careDate"/>
			<collection property="careImageList" ofType="CareImage">
				<!-- <id column ="care_id" property="careId"/> -->
				<result column="care_image" property="careImage"/>
			</collection>
		</collection>
	</resultMap>
	
	<!-- 예약에 해당하는 회원을 조회하는 resultmap -->
	<!-- <resultMap id="reservation-join-member-resultmap" type="Reservation" extends="com.plz.config.mybatis.mapper.memberMapper.member-join-sitter-resultmap">
		<collection property ="" ofType ="">
			<id column = "" property =""/>
				
			<association property="" javaType="">
				<id column="" property=""/>
				<result column="" property=""/>
			</association>
		</collection>
	</resultMap> -->
	
	<!-- 예약 전체 조회 -->
	<select id="selectAllReservation" parameterType="string" resultMap="reservation-resultmap">
		<include refid="reservation-sql"/>
	</select>
	
	<!-- 회원에서 이메일로 예약조회 -->
	<select id="selectMemberReservationByEmail" parameterType="string" resultMap="reservation-resultmap">
		<include refid="reservation-sql"/>
		where email = #{email}
	</select>
	
	<!-- 시터의 이메일로 예약조회 -->
	<select id="selectSitterReservationByEmail" parameterType="string" resultMap="reservation-resultmap">
		<include refid="reservation-sql"/>
		where email_sitter = #{email}
	</select>
	
	<!-- 시터에서 이메일로 예약조회 -->
<!-- 	<select id="selectSitterReservationByEmail" parameterType="string" resultMap="reservation-resultmap">
		<include refid="reservation-sql"/>
		where r.email_sitter = #{email}
	</select> -->
	
	<!--Email로 회원의 예약상태를 조회(reservation-> demand -> code) -->
	<select id="selectReservationJoinDemandByEmail" parameterType="string" resultMap="reservation-join-demand-resultmap">
		<include refid="reservation-join-demand-sql"/>
		and r.email = #{email}
	</select> 
	
	<!--ResID로 해당 예약의 시터의 급여를 조회 -->
	<select id="selectSitterReservationSalesByResId" parameterType="_int" resultMap="reservation-join-sales-resultmap">
		<include refid="reservation-join-sales-sql"/>
		and r.res_id = #{resId}
	</select>
	
	<!-- 회원(견주)의 Email로 돌봄일지를 조회 -->
	<select id="selectMemberCareByEmail" parameterType="string" resultMap ="reservation-join-care-resultmap">
		<include refid="reservation-join-care-sql"/>
		and r.email = #{email}
	</select>
	
	<!-- 시터의 Email로 돌봄일지를 조회 -->
	<select id="selectSitterCareByEmail" parameterType="string" resultMap ="reservation-join-care-resultmap">
		<include refid="reservation-join-care-sql"/>
		and r.email_sitter = #{email}
	</select>
	
	<!-- 회원이 예약을 추가 -->
	<insert id ="insertReservation" parameterType="Reservation">
		<selectKey keyProperty="resId" resultType="_int" order="BEFORE">
        	select RESERVATION_id_seq.nextval from dual
      	</selectKey>
		insert into reservation values(#{resId}, #{resType}, #{resSDate}, 
		#{resEdate}, #{resContents},#{memberEmail},#{sitterEmail})
	</insert>
	
	<!-- 예약ID를 통해 수정한다. -->
	<update id="updateReservation" parameterType="Reservation">
		update   reservation 	
		set 	 res_type = #{resType},
			     res_sDate = #{resSDate},
			     res_eDate = #{resEDate},
			     res_contents = #{resContents},
			     email = #{memberEmail},
			     email_sitter = #{sitterEmail}
		where    res_id = #{resId}
	</update>
	
	<delete id ="deleteReservation" parameterType="_int">
		delete from reservation where res_id = #{resId}
	</delete>
	
	<!-- 
		서비스 요구 사항(demand) insert , update, delete  
	 -->
	 
	 <insert id = "insertDemand" parameterType="Demand">
	 	insert into demand values(#{resId}, #{codeDemand})
	 </insert>
	 
	 <update id = "updateDemand" parameterType ="Demand">
	 	update  demand
	 	set     code_demand = #{codeDemand}
	 	where   res_id = #{resId} 
	 	and 	code_demand = #{codeDemand}
	 </update>
	 
	 <delete id = "deleteDemand" parameterType="_int">
	 	delete from Demand and res_id = #{resId}
	 </delete>
</mapper>